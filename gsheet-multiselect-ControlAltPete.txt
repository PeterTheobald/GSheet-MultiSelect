/**
 * @OnlyCurrentDoc
 */

function onEdit(e) {
  multiSelect(e);
}

// gsheets-multiselect - Google Sheets MultiSelect - @ControlAltPete 2023
//
// Allow cells with data-validation to have multi-select.
// The cell should have data validation from a range and 
// the cell immediately above that validation range must contain:
// MultiSelect:ShowInCell or MultiSelect:ShowRight or MultiSelect:ShowBelow

// The default item separator is "value1, value2" but this can be changed
// by adding ",Sep=" to the MultiSelect cell, eg: MultiSelect:ShowInCell,Sep=|
// If the Sep has a comma or spaces you need quotes, eg: MultiSelect:ShowInCell,Sep=" , "
//
// The special values '' (blank) 'None' and 'All' will replace all previously selected values.
//
// Google Sheets will show a warning triangle when multiple items are selected,
// This warning shows for ShowInCell but not for ShowRight or ShowBelow.
// To hide this warning, add ",HideWarning" to the MultiSelect cell, eg: "MultiSelect:ShowInCell,HideWarning"
// but be aware this will add a new dropdown option with all the current selected items
// ie: the dropdown: 'Apple' 'Banana' 'Cherry' can become 'Apple' 'Banana' 'Cherry' 'Apple,Banana'
// A limitation of HideWarning is it can only hide the warning for ONE input cell
// If multiple input cells share the same data validation range and have different multi-select choices
// only one of them will have the warning triangle hidden at a time.

// Installation: Google Sheet, click on Extensions > Apps Script, paste this


function multiSelect(e) {
  const sheet = e.range.getSheet();
  const modifiedCell = e.range;
  
  // Check if the modified cell has data validation
  const validationRule = modifiedCell.getDataValidation();
  if (!validationRule) return; 
  
  const criteriaType = validationRule.getCriteriaType();
  if (criteriaType !== SpreadsheetApp.DataValidationCriteria.VALUE_IN_RANGE) return;

  let validationRange = validationRule.getCriteriaValues()[0];
  const activationValue = validationRange.offset(-1, 0).getValue();

  // Check if activation cell begins with 'MultiSelect'
  if (!activationValue.toLowerCase().startsWith('multiselect')) return;

  // Extract custom separator, defaulting to ", " if not specified
  let separator = ", ";
  const regex = new RegExp(`Sep=("[^"]*"|[^,\\s]+)`);
  const match = activationValue.match(regex);
  if (match) {
    separator = match[1].replace(/^"|"$/g, ''); // remove any quotes
  }
  let currentValues;
  let showWhere;
  switch (true) { // pattern match
    case activationValue.toLowerCase().includes('showright'):
      showWhere='right';
      currentValues = modifiedCell.offset(0, 1).getValue().split(separator).map(value => value.trim());
      break;
    case activationValue.toLowerCase().includes('showbelow'):
      showWhere='below';
      currentValues = modifiedCell.offset(1, 0).getValue().split(separator).map(value => value.trim());
      break;
    case activationValue.toLowerCase().includes('showincell'):
    default:
      showWhere='cell';
      currentValues = e.oldValue.split(separator).map(value => value.trim());
  }
  const newValue = e.value;

  // Modify the new list of values
  if (newValue === '' || newValue.toLowerCase() === 'all' || newValue.toLowerCase() === 'none') {
    currentValues = [newValue];  // If "" or "all" or "none" is selected, clear other choices
  } else {
    // If "all" or "none" exists in the current values, remove them regardless of case
    currentValues = currentValues.filter(value => {
        const lowerCaseValue = value.toLowerCase();
        return value !== '' && lowerCaseValue !== 'all' && lowerCaseValue !== 'none';
    });
    // If the value is already present, it means user wants to deselect it. So, we remove it.
    const index = currentValues.indexOf(newValue);
    if (index > -1) {
      currentValues.splice(index, 1);
    } else {
      currentValues.push(newValue);
    }
  }

  // Join all values to get the final value
  const finalValue = currentValues.join(separator);

  // Show the result in the specified location based on 'ShowInCell', 'ShowRight' or 'ShowBelow'
  switch (showWhere) {
  case 'cell':
    // ShowInCell is the most complicated, because we need to alter the data validation
    // validation must be set to Show-Warning instead of the default Reject-Input
    let newValidationRule = null;
    if (!validationRule.getAllowInvalid()) {
      newValidationRule = validationRule.copy().setAllowInvalid(true).setHelpText("Multiple selections are allowed.");
    }
    if (activationValue.toLowerCase().includes('hidewarning')) { // add extra data validation item to hide warnings
      let hideWarningCell = sheet.getRange(validationRange.getLastRow(), validationRange.getColumn());
      if (currentValues.length>1) { // selection is a MultiSelect, must hide warning
        if (hideWarningCell.getValue() !== '' && !hideWarningCell.getValue().includes(separator)) {
          // the last validation cell isn't a hideWarningCell, create one
          validationRange = validationRange.offset( 0, 0, validationRange.getNumRows()+1);
          //validationRange = sheet.getRange(validationRange.getRow(), validationRange.getColumn(), validationRange.getLastRow() - validationRange.getRow() + 2, validationRange.getNumColumns());
          if (newValidationRule === null) {
            newValidationRule = validationRule.copy().requireValueInRange(validationRange);
          } else {
            newValidationRule = newValidationRule.requireValueInRange(validationRange);
          }
          hideWarningCell = sheet.getRange(validationRange.getLastRow(), validationRange.getColumn());          
        }
        hideWarningCell.setValue( finalValue);
      } else { // selection is a single select, blank hideWarning item if it exists
        if (hideWarningCell.getValue().includes(separator)) {
          hideWarningCell.setValue('');
        }
      }
    }
    if (newValidationRule !== null) {
      modifiedCell.setDataValidation(newValidationRule.build());
    }
    modifiedCell.setValue(finalValue);
    break;
  case 'right':
    modifiedCell.offset(0, 1).setValue(finalValue);
    modifiedCell.setValue('');
    break;
  case 'below':
    modifiedCell.offset(1, 0).setValue(finalValue);
    modifiedCell.setValue('');
    break;
  }
}

